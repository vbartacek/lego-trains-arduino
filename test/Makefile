#
# Makefile for building test cases including the libraries and 3rd party test and mock libraries
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = LightSensor_unittest

# Points to the root of Google Test, relative to where this file is.
GTEST_DIR           = ../../googletest/googletest
GMOCK_DIR           = ../../googletest/googlemock

# Where to find user code.
USER_DIR = ..

# Flags passed to the preprocessor.
# Set Google Test and Google Mock's header directories as system
# directories, such that the compiler doesn't generate warnings in
# these headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition.
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

# Arduino-mock
ARDUINO_MOCK_DIR    = ../../arduino-mock
CPPFLAGS           += -I $(GMOCK_DIR)/include -I $(ARDUINO_MOCK_DIR)/include/arduino-mock

LOCAL_OBJDIR        = ./build
LOCAL_LIBDIR        = $(LOCAL_OBJDIR)/libs

MKDIR               = mkdir -p

LOCAL_LIBS_ = gmock_main.a arduino-mock.a
LOCAL_LIBS = $(patsubst %,$(LOCAL_LIBDIR)/%,$(LOCAL_LIBS_))


#--------------------
# Rules
#--------------------

all : $(TESTS)

clean :
	rm -rf *.a *.o $(LOCAL_OBJDIR) $(TESTS)


# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
$(LOCAL_LIBDIR)/gtest-all.o : $(GTEST_SRCS_)
	@$(MKDIR) $(dir $@)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc -o $@

$(LOCAL_LIBDIR)/gmock-all.o : $(GMOCK_SRCS_)
	@$(MKDIR) $(dir $@)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc -o $@

$(LOCAL_LIBDIR)/gmock_main.o : $(GMOCK_SRCS_)
	@$(MKDIR) $(dir $@)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc -o $@

$(LOCAL_LIBDIR)/gmock_main.a : $(LOCAL_LIBDIR)/gmock-all.o $(LOCAL_LIBDIR)/gtest-all.o $(LOCAL_LIBDIR)/gmock_main.o
	@$(MKDIR) $(dir $@)
	$(AR) $(ARFLAGS) $@ $^


# arduino-mock
ARDUINO_MOCK_SRCS_ = Arduino.cc Serial.cc
ARDUINO_MOCK_OBJS_ = $(patsubst %.cc,$(LOCAL_LIBDIR)/%.o,$(ARDUINO_MOCK_SRCS_))

$(LOCAL_LIBDIR)/%.o: $(ARDUINO_MOCK_DIR)/src/%.cc | $(LOCAL_OBJDIR)
	@$(MKDIR) $(dir $@)
	$(CC) -c $(CPPFLAGS) $(CXXFLAGS) -I $(ARDUINO_MOCK_DIR)/include $^ -o $@

$(LOCAL_LIBDIR)/arduino-mock.a: $(ARDUINO_MOCK_OBJS_) | $(LOCAL_OBJDIR)
	@$(MKDIR) $(dir $@)
	$(AR) $(ARFLAGS) $@ $^

$(LOCAL_OBJDIR):
	@$(MKDIR) $(LOCAL_OBJDIR)


#
# The test cases
#

LightSensor.o : $(USER_DIR)/LightSensor.cpp $(USER_DIR)/LightSensor.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/LightSensor.cpp

LightSensor_unittest.o : LightSensor_unittest.cc $(USER_DIR)/LightSensor.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c LightSensor_unittest.cc

LightSensor_unittest : LightSensor.o LightSensor_unittest.o $(LOCAL_LIBS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@


